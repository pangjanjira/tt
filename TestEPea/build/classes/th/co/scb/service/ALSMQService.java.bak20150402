/**
 * 
 */
package th.co.scb.service;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Hashtable;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import th.co.scb.db.DocRunningTable;
import th.co.scb.db.eguarantee.DeclarationTable;
import th.co.scb.db.eguarantee.EGuaranteeTable;
import th.co.scb.db.eguarantee.GPGuaranteeTable;
import th.co.scb.db.eguarantee.ProjectTaxTable;
import th.co.scb.model.EMapCodeError;
import th.co.scb.model.ETime;
import th.co.scb.model.eguarantee.Declaration;
import th.co.scb.model.eguarantee.EGuarantee;
import th.co.scb.model.eguarantee.GPGuarantee;
import th.co.scb.model.eguarantee.ProjectTax;
import th.co.scb.model.mq.LoanLGIssueRq;
import th.co.scb.model.mq.LoanLGMaintainRq;
import th.co.scb.model.mq.LoanLGResponse;
import th.co.scb.service.mq.EGuaranteeMQMessageException;
import th.co.scb.service.mq.MQConfig;
import th.co.scb.service.mq.MQConnectorFailedException;
import th.co.scb.service.mq.MQMessageService;
import th.co.scb.util.ConnectDB;
import th.co.scb.util.Constants;
import th.co.scb.util.DateUtil;
import th.co.scb.util.MqMessageUtils;
import th.co.scb.util.StringUtil;
import th.co.scb.util.TemplateUtil;
import th.co.scb.util.XMLUtil;

/**
 * @author s51486
 *
 */
public class ALSMQService {
	
	private static final Logger logger = LoggerFactory.getLogger(ALSMQService.class);
	private static final String DIFF_MONTH = "diff_month";
	private static final String FIRST_DUE_DATE = "first_due_date";
	
	
	public EGuarantee sendMQMessage(ConnectDB connectDB , EGuarantee eguarantee, HttpServletRequest request, ETime eTime) throws Exception, EGuaranteeMQMessageException, MQConnectorFailedException {
		
		logger.debug("======== in send MQ Message ==========");
		MQConfig mqConfig = new MQConfig();
		
		//connect MQ
		MQMessageService mq = null;
		
		DocRunningTable docRunningTable = null;
		DeclarationTable declarationTable = null;
		EGuaranteeTable eGuaranteeTable = null;
		
		String responseXML = "";
		
		try{
			
			mq = new MQMessageService();
			
			docRunningTable = new DocRunningTable(connectDB);
			declarationTable = new DeclarationTable(connectDB);
			eGuaranteeTable = new EGuaranteeTable(connectDB);
			
			//gen L/G No. --> case deposit only
			if(eguarantee.getPaymentMethod().equals(Constants.EGuarantee.DEPOSIT)){
				eguarantee.setBankGuaranteeNo(docRunningTable.genLGNo(eTime));
			}

			String requsetXML = reformatForMQ(eguarantee, request);
			//System.out.println("requsetXML >>> " + requsetXML);
			
			responseXML = mq.sendMessage(requsetXML,mqConfig.getReqQueue(),mqConfig.getResQueue(),eguarantee.getPaymentMethodDesc(), eguarantee.getCustomsRef(), Constants.EGUARANTEE_SYSTEM_NAME);
			//System.out.println("responseXML >>> " + responseXML);
			LoanLGResponse loanLGResponse = responseToObject(responseXML, eguarantee);
			
			
			if(("0001") .equals(loanLGResponse.getResCode()) && ("00").equals(loanLGResponse.getResALSStatusCode())){//TRANSACTION PROCESSED OK 
				//System.out.println(">>>>> in Case 0001");
				eguarantee.setEguaranteeStatus(Constants.EGuarantee.STATUS_BOOK);
				if(eguarantee.getPaymentMethod().equals(Constants.EGuarantee.DEPOSIT)){
					//add
					declarationTable.add(new Declaration(eguarantee.getDeclarationNo(), eguarantee.getDeclarationSeqNo()));
				}else if(eguarantee.getPaymentMethod().equals(Constants.EGuarantee.DEPOSIT_CANCEL)){
					//delete declaration
					declarationTable.remove(new Declaration(eguarantee.getDeclarationNo(), eguarantee.getDeclarationSeqNo()));
					
					//update status e_guarantee
					eGuaranteeTable.updateStatusCancel(eguarantee);
				}
				
			}else{
				//System.out.println(">>>>> Case NS ");
				//if not succeess clear L/G No. --> case deposit
				if(eguarantee.getPaymentMethod().equals(Constants.EGuarantee.DEPOSIT)){
					eguarantee.setBankGuaranteeNo("");
				}
				//if error --> set status
				eguarantee.setEguaranteeStatus(Constants.EGuarantee.STATUS_INFO);
				eguarantee.setMessageCode(mapCodeErrorMessage(loanLGResponse.getResALSErrorCode()));
				String errorOnALS = "";
				if(loanLGResponse != null ){
					String errorCode = loanLGResponse.getResALSErrorCode();
					String errorMsg = loanLGResponse.getResALSISQLMsg();
					if(errorCode != null && errorMsg != null){
						errorOnALS = StringUtil.nullToBlank(errorCode)+" - "+StringUtil.nullToBlank(errorMsg);
					}
				}
				//System.out.println(">>>>> errorOnALS = "+errorOnALS);
				eguarantee.setXmlOutput(errorOnALS);
			}

		}catch(EGuaranteeMQMessageException eg){
			logger.debug("ALS ERROR : EGuaranteeMQMessageException Error :"+eg);
			//ไม่สามารถทำรายการได้
			eguarantee.setBankGuaranteeNo("");
			eguarantee.setEguaranteeStatus(Constants.EGuarantee.STATUS_INFO);
			eguarantee.setMessageCode(Constants.MessageCode.UNABLE_TO_PROCESS);
			//throw eg;
			
		}catch(MQConnectorFailedException m){
			logger.debug("ALS ERROR : MQConnectorFailedException Error :"+m);
			//ไม่สามารถทำรายการได้
			eguarantee.setBankGuaranteeNo("");
			eguarantee.setEguaranteeStatus(Constants.EGuarantee.STATUS_INFO);
			eguarantee.setMessageCode(Constants.MessageCode.UNABLE_TO_PROCESS);
			//throw m;
			
		}catch (Exception e) {
			//e.printStackTrace();
			logger.debug("ALS ERROR : Exception Error :"+e);
			//ไม่สามารถทำรายการได้
			eguarantee.setBankGuaranteeNo("");
			eguarantee.setEguaranteeStatus(Constants.EGuarantee.STATUS_INFO);
			eguarantee.setMessageCode(Constants.MessageCode.UNABLE_TO_PROCESS);
			//throw e;
			
        }

		return eguarantee;
	}
	
	public GPGuarantee sendMQMessage(ConnectDB connectDB , GPGuarantee gpGuarantee, HttpServletRequest request, ETime eTime) throws Exception, EGuaranteeMQMessageException, MQConnectorFailedException {
		
		
		logger.debug("======== in send MQ Message ==========");
		MQConfig mqConfig = new MQConfig();
		
		//connect MQ
		MQMessageService mq = null;
		
		DocRunningTable docRunningTable = null;
		ProjectTaxTable projectTaxTable = null;
		GPGuaranteeTable gpGuaranteeTable = null;
		
		String responseXML = "";
		
		try{
			
			mq = new MQMessageService();
			
			docRunningTable = new DocRunningTable(connectDB);
			projectTaxTable = new ProjectTaxTable(connectDB);
			gpGuaranteeTable = new GPGuaranteeTable(connectDB);
			
			//gen L/G No. --> case setup issue only
			if(gpGuarantee.getIssueType().equals(Constants.GPGuarantee.SETUP_ISSUE)){
				gpGuarantee.setLgNo(docRunningTable.genLGNo(eTime));
			}
			
			//connect MQ --> setup and cancel issue only
			if(gpGuarantee.getIssueType().equals(Constants.GPGuarantee.CLAIM_ISSUE)){
				//set status
				gpGuarantee.setStatusLG(Constants.StatusLGGP.CLAIM);
				gpGuarantee.setTransactionStatus(Constants.EGuarantee.STATUS_SUCCESS);
				
				//update status gp_guarantee
				gpGuaranteeTable.updateStatusClaim(gpGuarantee);
				
			}else{
				String requsetXML = reformatForMQ(gpGuarantee, request);
				
				responseXML = mq.sendMessage(requsetXML,mqConfig.getReqQueue(),mqConfig.getResQueue(),gpGuarantee.getIssueTypeDesc(), gpGuarantee.getTxRef(), Constants.GP_SYSTEM_NAME);
				//System.out.println("responseXML >>> " + responseXML);
				LoanLGResponse loanLGResponse = responseToObject(responseXML, gpGuarantee);
				
				
				if(("0001") .equals(loanLGResponse.getResCode()) && ("00").equals(loanLGResponse.getResALSStatusCode())){//TRANSACTION PROCESSED OK 
					
					if(gpGuarantee.getIssueType().equals(Constants.GPGuarantee.SETUP_ISSUE)){
						//add
						projectTaxTable.add(new ProjectTax(gpGuarantee.getProjNo(), gpGuarantee.getVendorTaxId(), gpGuarantee.getSeqNo()));
						gpGuarantee.setStatusLG(Constants.StatusLGGP.APPROVE);
					}else if(gpGuarantee.getIssueType().equals(Constants.GPGuarantee.CANCEL_ISSUE)){
						//delete prject_tax
						projectTaxTable.remove(new ProjectTax(gpGuarantee.getProjNo(), gpGuarantee.getVendorTaxId(), gpGuarantee.getSeqNo()));
						
						//update status gp_guarantee
						gpGuaranteeTable.updateStatusCancel(gpGuarantee);
						gpGuarantee.setStatusLG(Constants.StatusLGGP.CANCLE);
					}
					gpGuarantee.setTransactionStatus(Constants.EGuarantee.STATUS_SUCCESS);
				}else{
					
					
					//if not succeess clear L/G No. --> case setup issue
					if(gpGuarantee.getIssueType().equals(Constants.GPGuarantee.SETUP_ISSUE)){
						gpGuarantee.setLgNo("");
					}
					
					//if error --> set status
					gpGuarantee.setStatusLG(Constants.StatusLGGP.REJECT);
					if(gpGuarantee.getIssueType().equals(Constants.GPGuarantee.CANCEL_ISSUE)){
						gpGuarantee.setStatusLG(Constants.StatusLGGP.CANCLE);
						
					}
					gpGuarantee.setTransactionStatus(Constants.EGuarantee.STATUS_UNSUCCESS);
					String errorOnALS = "";
					if(loanLGResponse != null ){
						String errorCode = loanLGResponse.getResALSErrorCode();
						String errorMsg = loanLGResponse.getResALSISQLMsg();
						if(errorCode != null && errorMsg != null){
							errorOnALS = StringUtil.nullToBlank(errorCode)+" - "+StringUtil.nullToBlank(errorMsg);
						}
					}
					//gpGuarantee.setStatusDesc(mapErrorMessage(loanLGResponse.getResALSErrorCode()));
					gpGuarantee.setMsgCode(mapCodeErrorMessage(loanLGResponse.getResALSErrorCode()));
					gpGuarantee.setXmlOutput(errorOnALS);
					
				}
			}
			
		}catch(EGuaranteeMQMessageException eg){
			logger.debug("ALS ERROR : EGuaranteeMQMessageException Error :"+eg);
			//ไม่สามารถทำรายการได้
			if(gpGuarantee.getIssueType().equals(Constants.GPGuarantee.SETUP_ISSUE)){
				gpGuarantee.setLgNo("");
				gpGuarantee.setStatusLG(Constants.StatusLGGP.REJECT);
			}else if(gpGuarantee.getIssueType().equals(Constants.GPGuarantee.CANCEL_ISSUE)){
				gpGuarantee.setStatusLG(Constants.StatusLGGP.CANCLE);
			}else if(gpGuarantee.getIssueType().equals(Constants.GPGuarantee.CLAIM_ISSUE)){
				gpGuarantee.setStatusLG(Constants.StatusLGGP.CLAIM);
			}
			gpGuarantee.setTransactionStatus(Constants.EGuarantee.STATUS_UNSUCCESS);
			gpGuarantee.setStatusDesc(Constants.StatusLGGP.UNABLE_TO_PROCESS);
			gpGuarantee.setXmlOutput(Constants.StatusLGGP.UNABLE_TO_PROCESS);
			//throw eg;
			
		}catch(MQConnectorFailedException m){
			logger.debug("ALS ERROR : MQConnectorFailedException Error :"+m);
			//ไม่สามารถทำรายการได้
			if(gpGuarantee.getIssueType().equals(Constants.GPGuarantee.SETUP_ISSUE)){
				gpGuarantee.setLgNo("");
				gpGuarantee.setStatusLG(Constants.StatusLGGP.REJECT);
			}else if(gpGuarantee.getIssueType().equals(Constants.GPGuarantee.CANCEL_ISSUE)){
				gpGuarantee.setStatusLG(Constants.StatusLGGP.CANCLE);
			}else if(gpGuarantee.getIssueType().equals(Constants.GPGuarantee.CLAIM_ISSUE)){
				gpGuarantee.setStatusLG(Constants.StatusLGGP.CLAIM);
			}
			gpGuarantee.setTransactionStatus(Constants.EGuarantee.STATUS_UNSUCCESS);
			gpGuarantee.setStatusDesc(Constants.StatusLGGP.UNABLE_TO_PROCESS);
			gpGuarantee.setXmlOutput(Constants.StatusLGGP.UNABLE_TO_PROCESS);
			//throw m;
			
		}catch (Exception e) {
			//e.printStackTrace();
			logger.debug("ALS ERROR : Exception Error :"+e);
			//ไม่สามารถทำรายการได้
			if(gpGuarantee.getIssueType().equals(Constants.GPGuarantee.SETUP_ISSUE)){
				gpGuarantee.setLgNo("");
				gpGuarantee.setStatusLG(Constants.StatusLGGP.REJECT);
			}else if(gpGuarantee.getIssueType().equals(Constants.GPGuarantee.CANCEL_ISSUE)){
				gpGuarantee.setStatusLG(Constants.StatusLGGP.CANCLE);
			}else if(gpGuarantee.getIssueType().equals(Constants.GPGuarantee.CLAIM_ISSUE)){
				gpGuarantee.setStatusLG(Constants.StatusLGGP.CLAIM);
			}
			gpGuarantee.setTransactionStatus(Constants.EGuarantee.STATUS_UNSUCCESS);
			gpGuarantee.setStatusDesc(Constants.StatusLGGP.UNABLE_TO_PROCESS);
			gpGuarantee.setXmlOutput(Constants.StatusLGGP.UNABLE_TO_PROCESS);
			//throw e;
			
        }
		
		return gpGuarantee;
	}
	
	public LoanLGResponse sendMQMessage(ConnectDB connectDB , EGuarantee eguarantee, HttpServletRequest request) throws Exception, EGuaranteeMQMessageException, MQConnectorFailedException {
		
		logger.debug("======== in send MQ Message ==========");
		MQConfig mqConfig = new MQConfig();
		
		//connect MQ
		MQMessageService mq = null;
		String responseXML = "";
		
		LoanLGResponse loanLGResponse = new LoanLGResponse();
		
		try{
			
			mq = new MQMessageService();
			
			String requsetXML = reformatForMQ(eguarantee, request);
			System.out.println("requsetXML >>> " + requsetXML);
			
			responseXML = mq.sendMessage(requsetXML,mqConfig.getReqQueue(),mqConfig.getResQueue(),eguarantee.getPaymentMethodDesc(), eguarantee.getCustomsRef(), Constants.EGUARANTEE_SYSTEM_NAME);
			System.out.println("responseXML >>> " + responseXML);
			loanLGResponse = responseToObject(responseXML, eguarantee);
			

		}catch(EGuaranteeMQMessageException eg){
			logger.debug("MQ ERROR : EGuaranteeMQMessageException Error " + eg);
			loanLGResponse.setCustomsRefNo(eguarantee.getCustomsRef());
			loanLGResponse.setResCode("99");
			loanLGResponse.setResDesc("MQ ERROR : EGuaranteeMQMessageException Error ");
			//throw eg;
			
		}catch(MQConnectorFailedException m){
			logger.debug("MQ ERROR : MQConnectorFailedException Error :"+m);
			
			loanLGResponse.setCustomsRefNo(eguarantee.getCustomsRef());
			loanLGResponse.setResCode("99");
			loanLGResponse.setResDesc("MQ ERROR : MQConnectorFailedException Error ");
			//throw m;
			
		}catch (Exception e) {
			logger.debug("MQ ERROR : Exception Error :"+e);
			//throw e;
			loanLGResponse.setCustomsRefNo(eguarantee.getCustomsRef());
			loanLGResponse.setResCode("99");
			loanLGResponse.setResDesc("MQ ERROR : Exception Error ");
			
        }

		return loanLGResponse;
	}
	
	public LoanLGResponse sendMQMessage(ConnectDB connectDB , GPGuarantee gpGuarantee, HttpServletRequest request) throws Exception, EGuaranteeMQMessageException, MQConnectorFailedException {
		
		logger.debug("======== in send MQ Message ==========");
		MQConfig mqConfig = new MQConfig();
		
		//connect MQ
		MQMessageService mq = null;
		String responseXML = "";
		
		LoanLGResponse loanLGResponse = new LoanLGResponse();
		
		try{
			
			mq = new MQMessageService();
			
			String requsetXML = reformatForMQ(gpGuarantee, request);
			System.out.println("requsetXML >>> " + requsetXML);
			
			responseXML = mq.sendMessage(requsetXML,mqConfig.getReqQueue(),mqConfig.getResQueue(),gpGuarantee.getIssueTypeDesc(), gpGuarantee.getTxRef(), Constants.GP_SYSTEM_NAME);
			System.out.println("responseXML >>> " + responseXML);
			loanLGResponse = responseToObject(responseXML, gpGuarantee);
			

		}catch(EGuaranteeMQMessageException eg){
			logger.debug("MQ ERROR : EGuaranteeMQMessageException Error " + eg);
			loanLGResponse.setCustomsRefNo(gpGuarantee.getTxRef());
			loanLGResponse.setResCode("99");
			loanLGResponse.setResDesc("MQ ERROR : EGuaranteeMQMessageException Error ");
			//throw eg;
			
		}catch(MQConnectorFailedException m){
			logger.debug("MQ ERROR : MQConnectorFailedException Error :"+m);
			
			loanLGResponse.setCustomsRefNo(gpGuarantee.getTxRef());
			loanLGResponse.setResCode("99");
			loanLGResponse.setResDesc("MQ ERROR : MQConnectorFailedException Error ");
			//throw m;
			
		}catch (Exception e) {
			logger.debug("MQ ERROR : Exception Error :"+e);
			//throw e;
			loanLGResponse.setCustomsRefNo(gpGuarantee.getTxRef());
			loanLGResponse.setResCode("99");
			loanLGResponse.setResDesc("MQ ERROR : Exception Error ");
			
        }

		return loanLGResponse;
	}
	
	private LoanLGResponse responseToObject(String responseXML, EGuarantee eGuarantee){
		
		LoanLGResponse loanLGResponse = new LoanLGResponse();

		loanLGResponse.setCustomsRefNo(eGuarantee.getCustomsRef());
		loanLGResponse.setResCode(XMLUtil.getTagValue("res_code", responseXML));
		loanLGResponse.setResDesc(XMLUtil.getTagValue("res_msg", responseXML));
		loanLGResponse.setResALSStatusCode(XMLUtil.getTagValue("StatusCode", responseXML));
		loanLGResponse.setResALSStatusDesc(XMLUtil.getTagValue("StatusDesc", responseXML));
		loanLGResponse.setResALSErrorCode(XMLUtil.getTagValue("ErrorCode", responseXML));
		loanLGResponse.setResALSISQLMsg(XMLUtil.getTagValue("ISQLMsg", responseXML));
		
		 
		return loanLGResponse;
	}
	
	private LoanLGResponse responseToObject(String responseXML, GPGuarantee gpGuarantee){
		
		LoanLGResponse loanLGResponse = new LoanLGResponse();

		loanLGResponse.setCustomsRefNo(gpGuarantee.getTxRef());
		loanLGResponse.setResCode(XMLUtil.getTagValue("res_code", responseXML));
		loanLGResponse.setResDesc(XMLUtil.getTagValue("res_msg", responseXML));
		loanLGResponse.setResALSStatusCode(XMLUtil.getTagValue("StatusCode", responseXML));
		loanLGResponse.setResALSStatusDesc(XMLUtil.getTagValue("StatusDesc", responseXML));
		loanLGResponse.setResALSErrorCode(XMLUtil.getTagValue("ErrorCode", responseXML));
		loanLGResponse.setResALSISQLMsg(XMLUtil.getTagValue("ISQLMsg", responseXML));
		
		 
		return loanLGResponse;
	}

	private LoanLGMaintainRq copyValueEGuaranteeCancelOrRefund(EGuarantee eguarantee){
		
		LoanLGMaintainRq loanLGMaintainRq = new LoanLGMaintainRq();
		
		loanLGMaintainRq.setRqUID(MqMessageUtils.generateRqUID());
		
		loanLGMaintainRq.settBRANCH(eguarantee.getDebtorBankBranchCode()); 
		loanLGMaintainRq.setAcctId(eguarantee.getDebtorBankAccNo());
		
		loanLGMaintainRq.setDocNo(eguarantee.getBankGuaranteeNo());
		//loanLGMaintainRq.setEffDt(MqMessageUtils.formatDate(new Date()));
		loanLGMaintainRq.setEffDt(eguarantee.getCustomsTransDate().substring(0, 10));
		//System.out.println("loanLGMaintainRq.getEffDt() >> "  + loanLGMaintainRq.getEffDt());
		//loanLGMaintainRq.setEffDt("2010-12-24");//24/12/2010 
		
		loanLGMaintainRq.setTranAmt(eguarantee.getDepositAmount().toString());
		
		if(eguarantee.getPaymentMethod().equals(Constants.EGuarantee.DEPOSIT_CANCEL)){
			loanLGMaintainRq.setChgStatusFlag("C");
		}else if(eguarantee.getPaymentMethod().equals(Constants.EGuarantee.REFUND)){
			loanLGMaintainRq.setChgStatusFlag(" ");
		}
		
		return loanLGMaintainRq; 
		
	}
	
	private LoanLGMaintainRq copyValueGPGuaranteeCancelIssue(GPGuarantee gpGuarantee){
		
		LoanLGMaintainRq loanLGMaintainRq = new LoanLGMaintainRq();
		
		loanLGMaintainRq.setRqUID(MqMessageUtils.generateRqUID());
		
		loanLGMaintainRq.settBRANCH(gpGuarantee.getBranchCode()); 
		loanLGMaintainRq.setAcctId(gpGuarantee.getAccountNo());
		loanLGMaintainRq.setAcctType(Constants.GP_SYSTEM_NAME);
		
		loanLGMaintainRq.setDocNo(gpGuarantee.getLgNo());
		//loanLGMaintainRq.setEffDt(MqMessageUtils.formatDate(new Date()));
		loanLGMaintainRq.setEffDt(DateUtil.convertFormatDateString(gpGuarantee.getDtm()));
		//System.out.println("loanLGMaintainRq.getEffDt() >> "  + loanLGMaintainRq.getEffDt());
		//loanLGMaintainRq.setEffDt("2010-12-24");//24/12/2010 
		
		loanLGMaintainRq.setTranAmt(gpGuarantee.getGuaranteeAmt().toString());
		
		if(gpGuarantee.getIssueType().equals(Constants.GPGuarantee.CANCEL_ISSUE)){
			loanLGMaintainRq.setChgStatusFlag("C");
		//}else if(gpGuarantee.getIssueType().equals(Constants.GPGuarantee.CLAIM_ISSUE)){
		//	loanLGMaintainRq.setChgStatusFlag(" ");
		}
		
		return loanLGMaintainRq;
		
	}

	private LoanLGIssueRq copyValueEGuaranteeDeposit(EGuarantee eguarantee, HttpServletRequest request){
		
		LoanLGIssueRq loanLGIssueRq = new LoanLGIssueRq();
		
		loanLGIssueRq.setRqUID(MqMessageUtils.generateRqUID());
		
		loanLGIssueRq.settBRANCH(eguarantee.getDebtorBankBranchCode());
		loanLGIssueRq.setAcctId(eguarantee.getDebtorBankAccNo());
		
		loanLGIssueRq.setDocNo(eguarantee.getBankGuaranteeNo());
		loanLGIssueRq.setCustRefNo(eguarantee.getCustomsRef());
		loanLGIssueRq.setDecrNo(eguarantee.getDeclarationNo());
		loanLGIssueRq.setDecrSeq(eguarantee.getDeclarationSeqNo());
		loanLGIssueRq.setTranAmt(eguarantee.getDepositAmount().toString());
		loanLGIssueRq.setIssueDt(eguarantee.getRequestDate());
		loanLGIssueRq.setArrivalDt(eguarantee.getRelateDate());
		loanLGIssueRq.setTaxId(eguarantee.getDebtorCompanyTaxNo());
		loanLGIssueRq.setOpenAcctData(genOpenAcctData(eguarantee, request));
		
		return loanLGIssueRq;
	}
	
	private LoanLGIssueRq copyValueGPGuaranteeSetupIssue(GPGuarantee gpGuarantee, HttpServletRequest request){
		
		LoanLGIssueRq loanLGIssueRq = new LoanLGIssueRq();
		
		loanLGIssueRq.setRqUID(MqMessageUtils.generateRqUID());
		
		loanLGIssueRq.settBRANCH(gpGuarantee.getBranchCode());
		loanLGIssueRq.setAcctId(gpGuarantee.getAccountNo());
		loanLGIssueRq.setAcctType(Constants.GP_SYSTEM_NAME);
		 
		loanLGIssueRq.setDocNo(gpGuarantee.getLgNo());
		//loanLGIssueRq.setCustRefNo(gpGuarantee.getTxRef());
		loanLGIssueRq.setCustRefNo(Constants.BLANK);
		loanLGIssueRq.setDecrNo(gpGuarantee.getProjNo());
		loanLGIssueRq.setDecrSeq(Integer.toString(gpGuarantee.getSeqNo())); 
		loanLGIssueRq.setTranAmt(gpGuarantee.getGuaranteeAmt().toString());
		loanLGIssueRq.setIssueDt(DateUtil.convertFormatDateString(gpGuarantee.getDtm()));
		loanLGIssueRq.setArrivalDt(gpGuarantee.getContractDate());
		loanLGIssueRq.setTaxId(gpGuarantee.getVendorTaxId());
		loanLGIssueRq.setOpenAcctData(genOpenAcctData(gpGuarantee, request));
		
		return loanLGIssueRq;
	}
	 
	private	String genOpenAcctData(EGuarantee eguarantee, HttpServletRequest request){
		
		String cdata = "";
		
		String tempFile = Constants.TEMPLETE_OPEN_ACCT_CDATA;
		TemplateUtil template = new TemplateUtil(tempFile, request.getSession().getServletContext());
		
		template.setContext("customsTransmitDate", MqMessageUtils.fillBlankAfter(StringUtil.nullToBlank(eguarantee.getRequestDate()),10));
		//template.setContext("customsTransmitDate", "2010-12-23");
		template.setContext("bankGuaranteeNo", MqMessageUtils.fillBlankAfter(StringUtil.nullToBlank(eguarantee.getBankGuaranteeNo()),15));
		template.setContext("depositAmount", MqMessageUtils.formatDecimal(StringUtil.nullToBlank(eguarantee.getDepositAmount().toString()),13,2));
		//วันนำเข้า / วันส่งออกของใบขนสินค้า + 1 ปี  
		//ไม่ต้องสนใจวัน ยกเว้น เดือน 2 ให้เช็คว่า ปีนี้ เป็น 28 หรือ 29
		template.setContext("firstDueDate", MqMessageUtils.fillBlankAfter(StringUtil.nullToBlank(MqMessageUtils.formatDate(DateUtil.addYear(DateUtil.stringToDate(eguarantee.getRelateDate()), 1))),10));
		//template.setContext("firstDueDate", "2011-12-23");
		template.setContext("contDate", MqMessageUtils.fillBlankAfter(StringUtil.nullToBlank(eguarantee.getRelateDate()),10));
		//template.setContext("contDate", "2010-12-23");
		template.setContext("depositAmount13", MqMessageUtils.formatDecimal(StringUtil.nullToBlank(eguarantee.getDepositAmount().toString()),11,2));
		template.setContext("bankAcctNo", MqMessageUtils.fillZeroBefore(StringUtil.nullToBlank(eguarantee.getDebtorBankAccNo()),14));
		template.setContext("declarationNo", MqMessageUtils.fillZeroBefore(StringUtil.nullToBlank(eguarantee.getDeclarationNo()),15));
		template.setContext("declarationSeq", MqMessageUtils.fillZeroBefore(StringUtil.nullToBlank(eguarantee.getDeclarationSeqNo()),15));
		template.setContext("taxId", MqMessageUtils.fillZeroBefore(StringUtil.nullToBlank(eguarantee.getDebtorCompanyTaxNo()),15));
		 
		template.setContext("customsName", MqMessageUtils.fillBlankAfter(StringUtil.nullToBlank(eguarantee.getCustomsName()),40));
		template.setContext("companyName", MqMessageUtils.fillBlankAfter(StringUtil.nullToBlank(eguarantee.getDebtorCompanyName()),40));
		
		cdata = template.getXML();
		
		return XMLUtil.addCDATA(cdata);
		
	}
	
	private	String genOpenAcctData(GPGuarantee gpGuarantee, HttpServletRequest request){
		
		String cdata = "";
		
		String tempFile = Constants.TEMPLETE_OPEN_ACCT_GP_CDATA;
		TemplateUtil template = new TemplateUtil(tempFile, request.getSession().getServletContext());

		//template.setContext("contractDate", MqMessageUtils.fillBlankAfter(StringUtil.nullToBlank(gpGuarantee.getContractDate()),10));
		//System.out.println("########################################");
		if(gpGuarantee.isBatch() == Boolean.TRUE){//run from batch -- offline
			//System.out.println("OFFLINE : SYSTEM DATE");
			template.setContext("contractDate", MqMessageUtils.fillBlankAfter(StringUtil.nullToBlank(DateUtil.getDateFormatYYYYMMDD(new Date())),10));
		}else{//online
			//System.out.println("ONLINE : DTM TAG");
			template.setContext("contractDate", MqMessageUtils.fillBlankAfter(StringUtil.nullToBlank(DateUtil.convertFormatDateString(gpGuarantee.getDtm())),10));
		}
		//System.out.println("########################################");
		
		template.setContext("lgNo", MqMessageUtils.fillBlankAfter(StringUtil.nullToBlank(gpGuarantee.getLgNo()),15));
		template.setContext("guaranteeAmt", MqMessageUtils.formatDecimal(StringUtil.nullToBlank(gpGuarantee.getGuaranteeAmt().toString()),13,2));
		template.setContext("bondType", gpGuarantee.getBondType());
		
		Hashtable<String, Object> firstDueDateHashtable =  getFirstDueDate(gpGuarantee);
		template.setContext("guaranteeAmt13", MqMessageUtils.formatDecimal(StringUtil.nullToBlank(gpGuarantee.getGuaranteeAmt().toString()),11,2));
		template.setContext("firstDueDate", DateUtil.getDateFormatYYYYMMDD(((Date)firstDueDateHashtable.get(FIRST_DUE_DATE))));
		template.setContext("startDate", MqMessageUtils.fillBlankAfter(StringUtil.nullToBlank(gpGuarantee.getStartDate()),10));
		String endDate = gpGuarantee.getEndDate();
		if(endDate == null || endDate.length() == 0){
			endDate = "9999-12-31";
		}
		template.setContext("endDate", MqMessageUtils.fillBlankAfter(StringUtil.nullToBlank(endDate),10));
		
		template.setContext("firstDueDateNumber", MqMessageUtils.fillZeroBefore(((Integer)firstDueDateHashtable.get(DIFF_MONTH)).toString(),3));
		
		template.setContext("accountNo", MqMessageUtils.fillZeroBefore(StringUtil.nullToBlank(gpGuarantee.getAccountNo()),14));
		template.setContext("projOwnName", MqMessageUtils.fillBlankAfter(StringUtil.nullToBlank(gpGuarantee.getProjOwnName()),40));
		template.setContext("vendorName", MqMessageUtils.fillBlankAfter(StringUtil.nullToBlank(gpGuarantee.getVendorName()),40));
		
		cdata = template.getXML();
		
		return XMLUtil.addCDATA(cdata);
		
	}
	
	private Hashtable<String, Object> getFirstDueDate(GPGuarantee gpGuarantee){
		
		Hashtable<String, Object> firstDueDateHashtable = new Hashtable<String, Object>();
		
		Calendar startCalendar = new GregorianCalendar();
		startCalendar.setTime(DateUtil.stringToDate(gpGuarantee.getStartDate()));
		Calendar endCalendar = new GregorianCalendar();
		endCalendar.setTime(DateUtil.stringToDate(gpGuarantee.getEndDate()));
		Calendar firstDueDateCalendar = new GregorianCalendar();
		
		//get day
		int dayStart = startCalendar.get(Calendar.DAY_OF_MONTH);
		//System.out.println("dayStart : " + dayStart);
		
		int dayEnd = endCalendar.get(Calendar.DAY_OF_MONTH);
		//System.out.println("dayEnd : " + dayEnd);
		
		//check endofmonth
		int endOfMonthStart = startCalendar.getActualMaximum(Calendar.DAY_OF_MONTH);
		//System.out.println("endOfMonthStart : " + endOfMonthStart);
		
		//int endOfMonthEnd = endCalendar.getActualMaximum(Calendar.DAY_OF_MONTH);
		//System.out.println("endOfMonthEnd : " + endOfMonthEnd);

		int diffYear = endCalendar.get(Calendar.YEAR) - startCalendar.get(Calendar.YEAR);
		int diffMonth = diffYear * 12 + endCalendar.get(Calendar.MONTH) - startCalendar.get(Calendar.MONTH);
		
		//System.out.println("diffYear : " + diffYear);
		//System.out.println("diffMonth : " + diffMonth);
		
		if((dayEnd > dayStart) && (dayStart != endOfMonthStart)){
			diffMonth++;
		}
		
		if(diffMonth < 3){
			diffMonth = 3;
		}
		
		//firstDueDateList.add(new Integer(diffMonth));
		firstDueDateHashtable.put(DIFF_MONTH, new Integer(diffMonth));
		//System.out.println("diffMonthSystem : " + diffMonth);
		
		//set first due date
		Date firstDueDate = DateUtil.addMonth(startCalendar.getTime(), diffMonth);
		//System.out.println("firstDueDate : " + getDateFormatDDMMYYYY(firstDueDate));
		if(dayStart == endOfMonthStart){
			//get endOfMonth firstDueDate
			
			firstDueDateCalendar.setTime(firstDueDate);
			int endOfMonthFirstDueDate = firstDueDateCalendar.getActualMaximum(Calendar.DAY_OF_MONTH);
			//System.out.println("endOfMonthFirstDueDate : " + endOfMonthFirstDueDate);
			
			//set end of month
			firstDueDateCalendar.set(Calendar.DAY_OF_MONTH, endOfMonthFirstDueDate);
			//System.out.println("firstDueDate(EndofMonth) : " + getDateFormatDDMMYYYY(firstDueDateCalendar.getTime()));
			firstDueDate = firstDueDateCalendar.getTime();
		}
		//firstDueDateList.add(firstDueDate);
		firstDueDateHashtable.put(FIRST_DUE_DATE, firstDueDate);
		
		return firstDueDateHashtable;
		
		
	}
	

	private String reformatCancelOrRefundForMQ(EGuarantee eguarantee, HttpServletRequest request)throws Exception{

		LoanLGMaintainRq loanLGMaintainRq = copyValueEGuaranteeCancelOrRefund(eguarantee);
		
		
		return reformatCancelOrRefundForMQ(loanLGMaintainRq, request);
	}
	
	private String reformatCancelOrRefundForMQ(LoanLGMaintainRq loanLGMaintainRq, HttpServletRequest request)throws Exception{
		
		logger.debug("======== in reformat Cancel Or Refund For MQ ==========");
		String reformatStr = "";
		
		String tempFile = Constants.TEMPLETE_XML_MQ_CANCEL_OR_REFUND;
		TemplateUtil template = new TemplateUtil(tempFile, request.getSession().getServletContext());
		
		template.setContext("serviceName", StringUtil.nullToBlank(loanLGMaintainRq.getServiceName()));
		template.setContext("userId", StringUtil.nullToBlank(loanLGMaintainRq.getUserId()));
		template.setContext("session", StringUtil.nullToBlank(loanLGMaintainRq.getSession()));
		template.setContext("lang", StringUtil.nullToBlank(loanLGMaintainRq.getLang()));
		
		template.setContext("spName", StringUtil.nullToBlank(loanLGMaintainRq.getSpName()));
		template.setContext("rqUID", StringUtil.nullToBlank(loanLGMaintainRq.getRqUID()));
		template.setContext("tUSER", StringUtil.nullToBlank(loanLGMaintainRq.gettUSER()));
		template.setContext("tBRANCH", StringUtil.nullToBlank(loanLGMaintainRq.gettBRANCH()));
		template.setContext("tSOURCE", StringUtil.nullToBlank(loanLGMaintainRq.gettSOURCE()));
		
		
		template.setContext("acctId", MqMessageUtils.fillBlankAfter(StringUtil.nullToBlank(loanLGMaintainRq.getAcctId()), 20));
		template.setContext("acctType", StringUtil.nullToBlank(loanLGMaintainRq.getAcctType()));
		
		template.setContext("docNo", MqMessageUtils.fillBlankAfter(StringUtil.nullToBlank(loanLGMaintainRq.getDocNo()),15));
		template.setContext("effDt", StringUtil.nullToBlank(loanLGMaintainRq.getEffDt()));
		//template.setContext("effDt", "2010-12-24");
		template.setContext("tranCode", StringUtil.nullToBlank(loanLGMaintainRq.getTranCode()));
		template.setContext("tranAmt", MqMessageUtils.formatDecimal(StringUtil.nullToBlank(loanLGMaintainRq.getTranAmt()),13,2));
		template.setContext("limitType", StringUtil.nullToBlank(loanLGMaintainRq.getLimitType()));
		template.setContext("limitCode", StringUtil.nullToBlank(loanLGMaintainRq.getLimitCode()));
		template.setContext("comment", StringUtil.nullToBlank(loanLGMaintainRq.getComment()));
		
		template.setContext("chgStatusFlag", StringUtil.nullToBlank(loanLGMaintainRq.getChgStatusFlag()));
		template.setContext("newStatus", StringUtil.nullToBlank(loanLGMaintainRq.getNewStatus()));
		template.setContext("oldStatus", StringUtil.nullToBlank(loanLGMaintainRq.getOldStatus()));
		
		reformatStr = template.getXML();
		
		return reformatStr;
	}
	
	private String reformatDepositForMQ(EGuarantee eguarantee, HttpServletRequest request)throws Exception{
		
		LoanLGIssueRq loanLGIssueRq = copyValueEGuaranteeDeposit(eguarantee, request);
		
		return reformatDepositForMQ(loanLGIssueRq, request);
	}
	
	private String reformatDepositForMQ(LoanLGIssueRq loanLGIssueRq, HttpServletRequest request)throws Exception{
		
		logger.debug("======== in reformat Deposit For MQ ==========");
		
		String reformatStr = "";
		
		String tempFile = Constants.TEMPLETE_XML_MQ_DEPOSIT;
		TemplateUtil template = new TemplateUtil(tempFile, request.getSession().getServletContext());
		
		template.setContext("serviceName", StringUtil.nullToBlank(loanLGIssueRq.getServiceName()));
		template.setContext("userId", StringUtil.nullToBlank(loanLGIssueRq.getUserId()));
		template.setContext("session", StringUtil.nullToBlank(loanLGIssueRq.getSession()));
		template.setContext("lang", StringUtil.nullToBlank(loanLGIssueRq.getLang()));
		
		template.setContext("spName", StringUtil.nullToBlank(loanLGIssueRq.getSpName()));
		template.setContext("rqUID", StringUtil.nullToBlank(loanLGIssueRq.getRqUID()));
		template.setContext("tUSER", StringUtil.nullToBlank(loanLGIssueRq.gettUSER()));
		template.setContext("tBRANCH", StringUtil.nullToBlank(loanLGIssueRq.gettBRANCH()));
		template.setContext("tSOURCE", StringUtil.nullToBlank(loanLGIssueRq.gettSOURCE()));
		
		template.setContext("acctId", MqMessageUtils.fillBlankAfter(StringUtil.nullToBlank(loanLGIssueRq.getAcctId()), 20));
		template.setContext("acctType", StringUtil.nullToBlank(loanLGIssueRq.getAcctType()));
		
		template.setContext("docNo", MqMessageUtils.fillBlankAfter(StringUtil.nullToBlank(loanLGIssueRq.getDocNo()),15));
		template.setContext("custRefNo", StringUtil.nullToBlank(loanLGIssueRq.getCustRefNo()));
		template.setContext("decrNo", StringUtil.nullToBlank(loanLGIssueRq.getDecrNo()));
		template.setContext("decrSeq", StringUtil.nullToBlank(loanLGIssueRq.getDecrSeq()));
		template.setContext("tranAmt", MqMessageUtils.formatDecimal(StringUtil.nullToBlank(loanLGIssueRq.getTranAmt()), 13, 2));
		template.setContext("issueDt", StringUtil.nullToBlank(loanLGIssueRq.getIssueDt()));
		template.setContext("arrivalDt", StringUtil.nullToBlank(loanLGIssueRq.getArrivalDt()));
		template.setContext("taxId", StringUtil.nullToBlank(loanLGIssueRq.getTaxId()));
		template.setContext("openAcctData", StringUtil.nullToBlank(loanLGIssueRq.getOpenAcctData()));
		
		reformatStr = template.getXML();
		logger.debug("======== out reformat Deposit For MQ ==========");
		return reformatStr;
	}
	
	private String reformatForMQ(EGuarantee eguarantee, HttpServletRequest request)throws Exception{
		
		logger.debug("======== in reformat For MQ ==========");
		String reformatStr = "";
		
		if(eguarantee.getPaymentMethod().equals(Constants.EGuarantee.DEPOSIT)){
			reformatStr = reformatDepositForMQ(eguarantee, request);
		}else{
			reformatStr = reformatCancelOrRefundForMQ(eguarantee, request);
		}

		return reformatStr;
		
	}
	
	
	private String mapCodeErrorMessage(String errorMsgALSMQ){
		
		String errorCodeMap = "";
		//System.out.println("------> errorMsgALSMQ : " +errorMsgALSMQ);
		if(errorMsgALSMQ!=null){

			EMapCodeErrorService eMapCodeErrorService = new EMapCodeErrorService();
			EMapCodeError eMapCodeErrorPk = new EMapCodeError();
			eMapCodeErrorPk.setMqCode(errorMsgALSMQ.trim());
			
			try{
				EMapCodeError eMapCodeError = eMapCodeErrorService.findEguaCode(eMapCodeErrorPk);
				if(eMapCodeError == null){
					errorCodeMap = Constants.MessageCode.UNABLE_TO_PROCESS;
				}else{
					errorCodeMap = eMapCodeError.getEguaCode();
				}
			}catch (Exception e) {
				// --: handle exception
				logger.error("Error Map Code Error Message : "+e.getMessage());
				errorCodeMap = Constants.MessageCode.UNABLE_TO_PROCESS;
			}
		}else{
			errorCodeMap = Constants.MessageCode.UNABLE_TO_PROCESS;
		}
		
		//System.out.println("return code : " + errorCodeMap);
		return errorCodeMap;
	}
	
	private String reformatForMQ(GPGuarantee gpGuarantee, HttpServletRequest request)throws Exception{
		
		logger.debug("======== in reformat For MQ ==========");
		String reformatStr = "";
		
		if(gpGuarantee.getIssueType().equals(Constants.GPGuarantee.SETUP_ISSUE)){
			reformatStr = reformatSetupIssueForMQ(gpGuarantee, request);
		}else{
			reformatStr = reformatCancelIssueForMQ(gpGuarantee, request);
		}

		return reformatStr;
		
	}
	
	private String reformatSetupIssueForMQ(GPGuarantee gpGuarantee, HttpServletRequest request)throws Exception{
		
		LoanLGIssueRq loanLGIssueRq = copyValueGPGuaranteeSetupIssue(gpGuarantee, request);
		
		return reformatDepositForMQ(loanLGIssueRq, request);
		
	}
	
	private String reformatCancelIssueForMQ(GPGuarantee gpGuarantee, HttpServletRequest request)throws Exception{

		LoanLGMaintainRq loanLGMaintainRq = copyValueGPGuaranteeCancelIssue(gpGuarantee);
		
		
		return reformatCancelOrRefundForMQ(loanLGMaintainRq, request);
	}
	
}
