package th.co.scb.controller.eguarantee;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.nio.charset.Charset;
import java.util.Scanner;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Part;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import th.co.scb.model.ETime;
import th.co.scb.model.LogEBXML;
import th.co.scb.model.eguarantee.EGuarantee;
import th.co.scb.service.ALSMQService;
import th.co.scb.service.DocRunningService;
import th.co.scb.service.ETimeService;
import th.co.scb.service.LogEBMXLService;
import th.co.scb.service.OffHostService;
import th.co.scb.service.eguarantee.EGuaranteeService;
import th.co.scb.service.mq.EGuaranteeMQMessageException;
import th.co.scb.util.Constants;
import th.co.scb.util.XMLUtil;

/**
 * 
 * Servlet implementation class EGuaranteeRequestControl
 * 
 */
@WebServlet("/EGuaranteeRequestControl_backup120955")
public class EGuaranteeRequestControl_backup120955 extends HttpServlet {
	
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LoggerFactory.getLogger(EGuaranteeRequestControl.class);
	private LogEBMXLService logEBXMLService = new LogEBMXLService();
       
	protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
		
		//logger.debug("------ in EGuaranteeRequestControl ------------");
		//myUrl : http://xxxxxxxx/EGuarantee/EGuaranteeRequestControl
		//msg : xml={xmlString}[;;;;;type{web or batch};;;;;lg_no] -->//[option]

		EGuaranteeService eGuaranteeService = new EGuaranteeService();
		DocRunningService docRunningService = new DocRunningService();
		ALSMQService alsMQService = null;
		ETimeService eTimeService = null;
		OffHostService offHostService = null;
		
		LogEBXML logEBXML = null;
		EGuarantee eguarantee = null;
		
		String responseMsg = "";
		String resCode = "";
		String resMsg = "";
		boolean isDupEGuarantee = false;
		
		try{
			
			alsMQService = new ALSMQService();
			eTimeService = new ETimeService();
			offHostService = new OffHostService();

			//---------- get request ---------
			logEBXML = readInputXMLFile(request);
			if( logEBXML == null ){
				logger.error("@process Request : Data not found…");
                throw new IOException("Data not found");
			}
			
			//xmlInput from EBXML to Object
			eguarantee = eGuaranteeService.ebxmlToObject(logEBXML.getXmlInput());
			System.out.println("egua : " + eguarantee);
			
			//-----------process MQ Or offline process at E-Guarantee ----
			if(logEBXML.getType().equals(Constants.TypeConnect.BATCH)){
				logger.debug("======== in batch process ==========");
				//connect MQ
				eguarantee = alsMQService.sendMQMessage(eguarantee);
				
			}else{//web 
				logger.debug("======== in web process ==========");
				
				ETime eTime = eTimeService.isTimeOffHostALS();
				boolean isTimeOffHostALS = eTime.isTimeOffHostALS();
				if(isTimeOffHostALS == true){
					logger.debug("======== ALS OFFLINE ==========");
					eguarantee.setAlsOnline(Constants.StatusALSOnline.NO);
	        	}else{
	        		logger.debug("======== ALS ONLINE ==========");
	        		eguarantee.setAlsOnline(Constants.StatusALSOnline.YES);
	        	}
				eguarantee.setProcessDate(eTime.getProcessDate());
				
				keepLogInputEBXML(logEBXML, isTimeOffHostALS);
				//check dup -- case deposit --> check case in method isDupEGuarantee
				isDupEGuarantee = eGuaranteeService.isDupEGuarantee(eguarantee);
				if(isDupEGuarantee == true){// is dup
					logger.debug("======== DUP ==========");
					//set massage code error 
					eguarantee.setMessageCode(Constants.MessageCode.DUP_TRANSACTION);
					
				}else{
					logger.debug("======== No-DUP ==========");
					if(isTimeOffHostALS == true){// als offline
						eguarantee = offHostService.manageEGuaranteeOffline(eguarantee, logEBXML.getXmlInput());
					}else{// als online
						//connect MQ
						eguarantee = alsMQService.sendMQMessage(eguarantee);
					}//end of check time als
					
				}//end check dup
				
				
				
			}//end of check type connect

			resCode = "01";
			resMsg = "File-uploaded-successfully!";
			
		}catch(EGuaranteeMQMessageException eg){
			// ---: handle exception
			resCode = "99";
			resMsg = "EGuarantee MQ message exception -->" + eg.getMessage();
			
		}catch (ServletException e) {
			// ---: handle exception
			resCode = "99";
			resMsg = "Servlet exception -->" + e.getMessage();
		}catch (IOException e) {
			// ---: handle exception
			resCode = "99";
			resMsg = "I/O exception -->" + e.getMessage();
		}catch (Exception e) {
			// ---: handle exception
			resCode = "99";
			resMsg = "Exception -->" + e.getMessage();
		}
		
		
		//------------- response to EBXML ---------------------
		
		//gen bank transactin No.
		try{
			eguarantee.setBankTransactionNo(docRunningService.genBankTransactionNo());
		}catch (Exception e) {
			// --: handle exception
		}
		
		if(logEBXML.getType().equals(Constants.TypeConnect.WEB)){
			
			try{
				
				//insert into e_guarantee
				eGuaranteeService.insertEGuarantee(eguarantee);
				responseMsg = eGuaranteeService.objectToEbxmlReturn(eguarantee, request);
				
				System.out.println("xml response : " + responseMsg);
				System.out.println("file Name : " + eguarantee.getPaymentMethodDesc()+"_"+eguarantee.getCustomsRef()+".xml");
				
				//call URL EBXML
				callURLEBXML(responseMsg, eguarantee);
			
			}catch (Exception e) {
				// TODO: handle exception
			}
			
		}else{// batch
			
		}

		response.setContentType("text/xml");
		OutputStreamWriter out = new OutputStreamWriter(response.getOutputStream(), "UTF-8");
        out.write(genXMLResponse(resCode, resMsg));
        out.close();

	}
	
	private String genXMLResponse(String resCode, String resMsg){
		
		String xmlRes = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><eGuaranteeResponse><Rescode>"+resCode+"</Rescode><ResMsg>"+resMsg+"</ResMsg></eGuaranteeResponse>";
		
		return xmlRes;
		
	}
	
	private void callURLEBXML(String responseMsg, EGuarantee eGuarantee) {
		String toservlet = "http://10.248.3.115:8080/ebXMLeGuarantee/ReceiveResponseServlet";
		
		// -- Auto-generated method stub
		//String yourFile = "e_guarantee_deposit_response.xml";
		String yourFile = eGuarantee.getPaymentMethodDesc()+"_"+eGuarantee.getCustomsRef()+".xml";
		System.out.println("file Name : " + yourFile);

        //-- String to file---
        File f = new File(yourFile);
        Writer exportFile = null;

        HttpClient httpclient = new DefaultHttpClient();
        try {

            HttpPost httppost = new HttpPost(toservlet);
 
            exportFile = new OutputStreamWriter(new FileOutputStream(f),"UTF-8");  
            exportFile.write(responseMsg);
            exportFile.flush();
            
            FileBody fileBody = new FileBody(f);
 
            MultipartEntity reqEntity = new MultipartEntity();
            reqEntity.addPart("file", fileBody);
            reqEntity.addPart("filename", new StringBody(yourFile, Charset.forName("UTF-8")));
 
            httppost.setEntity(reqEntity);
 
            System.out.println("executing request " + httppost.getRequestLine());
            HttpResponse response = httpclient.execute(httppost);
            HttpEntity resEntity = response.getEntity();
 
            System.out.println("----------------------------------------");
            System.out.println(response.getStatusLine());
            if (resEntity != null) {
            	
                System.out.println("Response content : " + EntityUtils.toString(response.getEntity()));

            }
            EntityUtils.consume(resEntity);
        }catch (Exception e) {
			// TODO: handle exception
        	e.printStackTrace();
        } finally {
        	if(exportFile != null){
        		try{
        			exportFile.close();
        		}catch (Exception e) {
					// TODO: handle exception
				}
        	}
            try { httpclient.getConnectionManager().shutdown(); } catch (Exception ignore) {}
        }
	}
	
	private void keepLogOutputEBXML(LogEBXML logEBXML) throws Exception{
		try{
        	logEBXMLService.updateLogEBXML(logEBXML);
        }catch (Exception e) {
			// --: handle exception
        	//e.printStackTrace();
        	throw  new Exception(e.getMessage());
		}
	}
	
	private void keepLogInputEBXML(LogEBXML logEBXML, boolean isTimeOffHostALS) throws Exception{

        try{
        	if(isTimeOffHostALS == true){
        		logEBXML.setAlsOnline(Constants.StatusALSOnline.NO);
        	}else{
        		logEBXML.setAlsOnline(Constants.StatusALSOnline.YES);
        	}
        	
        	logEBXML = logEBXMLService.insertLogEBXML(logEBXML);
        }catch (Exception e) {
			// --: handle exception
        	//e.printStackTrace();
        	throw  new Exception(e.getMessage());
		}
        
	}
	

	private LogEBXML readInputXMLFile(HttpServletRequest request) throws IOException, ServletException{
		
		LogEBXML logEBXML = new LogEBXML();
		
		//----------- Reading a request InputStream ---------------
		StringBuilder stringBuilder = new StringBuilder();
        BufferedReader bufferedReader = null;
        String inputStr = "";
        String fileName = "";

        try {
        	//1. Receive Parameters from URL
            //POST file
            // get access to file that is uploaded from client
            Part p1 = request.getPart("file");
            InputStream inputStream = p1.getInputStream();
 
            // read filename which is sent as a part
            Part p2  = request.getPart("filename");
            Scanner s = new Scanner(p2.getInputStream());
            fileName = s.nextLine();    // read filename from stream
            
            //InputStream inputStream = request.getInputStream();

            if (inputStream.available()>0) {
            //if (inputStream != null) {
            	
                bufferedReader = new BufferedReader(new InputStreamReader(inputStream,Constants.ENCODING));
                String b = "";
                
                bufferedReader.read();
                while ((b = bufferedReader.readLine()) != null) {
                    stringBuilder.append(b.trim());
                }
                
            } else {
                //stringBuilder.append("");
                logger.error("@readInputXMLFile : File not found…");
                throw new IOException("File not found");
            }
            
            inputStr = stringBuilder.toString();
            System.out.println("inputStr : " + inputStr);
            
            if(inputStr != null && inputStr.length() > 0){
            	
    	        String[] str = inputStr.split(";;;;;");
    	        String xmlStr = str[0];
    	        String type = "";
    	        String lgNo = "";
    	        
    	        try{
    	        	type = str[1];
    	        }catch (Exception e) {
    				// --: handle exception
    	        	type = "web";
    			}
    	        
    	        try{
    	        	lgNo = str[2];
    	        }catch (Exception e) {
    				// --: handle exception
    	        	lgNo = "";
    			}
    	        
    	        //System.out.println("type : " + type);
    	        //System.out.println("xmlStr : " + xmlStr);
    	        //System.out.println("lgNo : " + lgNo);
    	        
    	        logEBXML.setType(type);
    	        logEBXML.setXmlInput(xmlStr);
    	        logEBXML.setLgNo(lgNo);
    	        logEBXML.setFileName(fileName);
    	
    	        String customsRefNo = XMLUtil.getTagValue("MsgId", xmlStr);
    	        logEBXML.setCustomsRefNo(customsRefNo);
            }
            
        } catch (ServletException ex) {
        	
        	logger.error("@Read Input XMLFile : "+ex.getMessage()+"…");
        	throw  new ServletException(ex.getMessage());
        	
        } catch (IOException ex) {
        	
        	logger.error("@Read Input XMLFile : "+ex.getMessage()+"…");
        	throw  new IOException(ex.getMessage());
        	
        } finally {
            if (bufferedReader != null) {
                try {
                    bufferedReader.close();
                } catch (IOException ex) {
                	logger.error("@Read Input XMLFile : Error closing bufferedReader…");
                	throw  new IOException(ex.getMessage());
                }
            }
        }


		return logEBXML;
	}
	


	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// --- Auto-generated method stub
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// -- Auto-generated method stub
		processRequest(request, response);
	}

}
